创建者模式抽象了实例化的过程。他们帮助一个系统独立的创造对象，组成对象和表示对象。一个类创建者模式使用继承去分化被实例化的类，
在那里一个对象创建者模式将给另一个对象代表实例。

创建者模式变得重要，当系统依靠更多在对象组成而不是类的继承。当那发生后，重点将会改变，从艰难的编写一套固定的行为，到定义一套
更小的基本行为（能组成复杂的单位）。因此，创造有特殊行为的对象依靠多于简单的实例化一个类。

这种模式有两个重复出现的主题。第一，他们都封装关于系统使用的具体类的知识。第二，他们隐藏了这些被创建的类的实例。所有大规模的系统
知道对象是他们抽象类定义的接口。因此创建者模式给你灵活性创建对象。他们让你使用一个“产品”对象来配置一个系统。
配置能是静态（编译时）的或者动态的（运行时）。

有时创建者模式是竞争者。例如Prototype和抽象工厂有益的，有时他们又是相辅相成的：建造者模式用其他模式来建造组件，Prototype用单例模式在他的实现类

How maze get created. We define a maze as a set of wall, or a door to another room.


Abstract Factory
提供一个接口为了创建有关的家人or 依靠的对象没有指定他们具体的类别。

Kit

Motivation:
    考虑一个用户接口工具，支持着多种 look-and-feel（界面）标准，比如说Motif（图案）和演示管理器，
    不同界面定义不同的外观和行为为用户接口的小工具（widgets），如scroll bars，windows，buttons
    对于一个可以移植的界面，一个应用不能很难编写它的工具的类，应用使得以后它变得困难去改动。
    我们能
